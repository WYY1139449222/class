/* 
    1.嵌套写法
    2.声明变量

*/


*{
    margin: 0;padding: 0;
    list-style: none;
}
.w{
    width: 100%;
    height: 100%;
    overflow: hidden;
    .qqq{
        background: red;
    }
}
div{
    .w;//直接把w的所有样式拿过类
}
span:extend(.w){
    //只会混合.w一层的样式  下级的样式不会获取
}
.mystyle(@a:100%,@b:100%){
    width: @a;
    height: @b;
}
div{
    .mystyle(200px, 300px);
}

@w:200px; //声明一个变量@w 对应的值是 200px;
#box{
    width: @w;
    height: @w;
    margin:160px auto;
    position: relative;
    background: red;
    perspective: 5000px;
    ul{
        position: absolute;
        width: @w;
        height: @w;
        transform-style: preserve-3d;
        transform: rotateX(-207deg) rotateY(-559deg);
        animation: move 3s linear infinite;
        transform-origin: @w/2 @w/2 -@w/2;
        >li{
            position: absolute;
            text-align: center;
            line-height: @w;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgb(138, 43, 226,0.5);
            border: 1px solid rgba(226, 193, 6, 0.6);
            &:nth-child(2){
                //&代表了当前的父级元素
                transform: rotateX(90deg);
                transform-origin: bottom;
            }
            &:nth-child(1){
                transform: rotateZ(180deg);
            }
            &:nth-child(3){
                transform: rotateY(90deg);
                transform-origin: left;
            }
            &:nth-child(6){
                transform: translateZ(-@w) rotateZ(180deg);
                
            }
            &:nth-child(4){
                transform: rotateY(-90deg) ;
                transform-origin: right;
            }
            &:nth-child(5){
                transform: rotateX(-90deg) ;
                transform-origin: top;
            }
        }
        
        
       
    }
    
   
}
@keyframes move {
    0%{
        transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    }
    100%{
        transform: rotateX(360deg) rotateY(360deg) ;
    }
  }